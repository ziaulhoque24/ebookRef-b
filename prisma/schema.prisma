generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  email            String     @unique
  password         String
  firstName        String
  lastName         String
  referralCode     String?    @unique
  credits          Int        @default(0)
  hasMadePurchase  Boolean    @default(false)
  referralsMade    Referral[] @relation("Referrer")
  referralReceived Referral?  @relation("ReferredUser")
  orders           Order[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Referral {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  status    ReferralStatus @default(PENDING)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  // person who owns link
  referrerId String @db.ObjectId
  referrer   User   @relation("Referrer", fields: [referrerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // new user who signed up 
  referredUserId String @unique @db.ObjectId // A user can only be referred once
  referredUser   User   @relation("ReferredUser", fields: [referredUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum ReferralStatus {
  PENDING
  CONVERTED
}

model Genre {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String       @unique
  ebookGenres EbookGenre[]
}

model Ebook {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  author      String
  price       Float
  coverImage  String
  fileUrl     String

  ebookGenres EbookGenre[]
  orderItems  OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EbookGenre {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  ebookId String @db.ObjectId
  ebook   Ebook  @relation(fields: [ebookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  genreId String @db.ObjectId
  genre   Genre  @relation(fields: [genreId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([ebookId, genreId])
}

model Order {
  id     String      @id @default(auto()) @map("_id") @db.ObjectId
  userId String      @db.ObjectId
  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  OrderItem[]

  totalAmount Float
  creditsUsed Float  @default(0)
  amountPaid  Float
  status      String @default("COMPLETED")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  orderId         String @db.ObjectId
  order           Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  ebookId         String @db.ObjectId
  ebook           Ebook  @relation(fields: [ebookId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  priceAtPurchase Float

  createdAt DateTime @default(now())
}
